{"version":3,"sources":["components/Stopwatch/Stopwatch.styled.js","utils/utils.js","components/Stopwatch/Stopwatch.js","App.styled.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Display","BtnWrapper","displayTimer","time","sec","slice","min","Math","floor","join","StopWatch","useState","timerState","setTimerState","isTimerOn","setIsTimerOn","pauseClick","setPauseClick","interval","doubleClickStream$","Observable","observer","next","state","setTimeout","stream$","setInterval","useEffect","subscribe","clearInterval","joinedTime","Button","type","variant","onClick","App","Stopwatch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAGaA,EAAUC,IAAOC,IAAV,qGAKPC,EAAUF,IAAOC,IAAV,sIASPE,EAAaH,IAAOC,IAAV,uFCTRG,EARM,SAACC,GACpB,IAAMC,GAAO,IAAOD,EAAO,IAAKE,OAAO,GACjCC,GAAO,IAAMC,KAAKC,MAAOL,EAAO,GAAM,KAAKE,OAAO,GAGxD,MAAO,EAFM,IAAME,KAAKC,MAAML,EAAO,OAAOE,OAAO,GAEtCC,EAAKF,GAAKK,KAAK,M,OCwEfC,EAvEG,WAChB,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEIC,EAAW,KAETC,EAAqB,IAAIC,KAAW,SAACC,GACzCA,EAASC,KAAKL,GAAc,SAACM,GAAD,OAAWA,EAAQ,MAC5B,IAAfP,GACFQ,YAAW,WACTH,EAASC,KAAKL,EAAc,MAC3B,KAGc,IAAfD,GACFK,EAASC,KAAKP,GAAa,OAsBzBU,EAAU,IAAIL,KAAW,SAACC,GAC9BP,IACGI,EAAWQ,aAAY,WACtBL,EAASC,KAAKT,GAAc,SAACU,GAAD,OAAWA,EAAQ,QAC9C,SAGPI,qBAAU,WAGR,OAFAF,EAAQG,YAED,kBAAMC,cAAcX,MAC1B,CAACA,EAAUJ,IAEd,IAAMgB,EAAa5B,EAAaU,GAEhC,OACE,eAACf,EAAD,WACE,cAACG,EAAD,UAAU8B,IACV,eAAC7B,EAAD,WACE,cAAC8B,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,YAAYC,QA5BvB,WACnBpB,EACFC,GAAa,IAEbA,GAAa,GACbE,EAAc,KAuBZ,wBAGA,cAACc,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,YAAYC,QAxCxB,WACtBf,EAAmBS,aAuCf,kBAGA,cAACG,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,YAAYC,QAvCvB,WACvBrB,EAAc,GACdE,GAAa,IAqCT,0BCnEKlB,EAAUC,IAAOC,IAAV,wDAEhB,ICOWoC,MARf,WACE,OACE,cAAC,EAAD,UACE,cAACC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b0d3623.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\nimport styledEngine from \"@mui/styled-engine\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\nexport const Display = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n\r\n  font-size: 60px;\r\n`;\r\n\r\nexport const BtnWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 5px;\r\n`;\r\n","const displayTimer = (time) => {\r\n  const sec = (\"0\" + (time % 60)).slice(-2);\r\n  const min = (\"0\" + Math.floor((time / 60) % 60)).slice(-2);\r\n  const hrs = (\"0\" + Math.floor(time / 3600)).slice(-2);\r\n\r\n  return [hrs, min, sec].join(\":\");\r\n};\r\n\r\nexport default displayTimer;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Observable } from \"rxjs\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Wrapper, Display, BtnWrapper } from \"./Stopwatch.styled\";\r\nimport displayTimer from \"../../utils\";\r\n\r\nconst StopWatch = () => {\r\n  const [timerState, setTimerState] = useState(0);\r\n  const [isTimerOn, setIsTimerOn] = useState(false);\r\n  const [pauseClick, setPauseClick] = useState(1);\r\n\r\n  let interval = null;\r\n\r\n  const doubleClickStream$ = new Observable((observer) => {\r\n    observer.next(setPauseClick((state) => state + 1));\r\n    if (pauseClick === 1) {\r\n      setTimeout(() => {\r\n        observer.next(setPauseClick(1));\r\n      }, 350);\r\n    }\r\n\r\n    if (pauseClick === 2) {\r\n      observer.next(setIsTimerOn(false));\r\n    }\r\n  });\r\n\r\n  const handleWaitClick = () => {\r\n    doubleClickStream$.subscribe();\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    setTimerState(0);\r\n    setIsTimerOn(false);\r\n  };\r\n\r\n  const handleStartClick = () => {\r\n    if (isTimerOn) {\r\n      setIsTimerOn(false);\r\n    } else {\r\n      setIsTimerOn(true);\r\n      setPauseClick(1);\r\n    }\r\n  };\r\n\r\n  const stream$ = new Observable((observer) => {\r\n    isTimerOn &&\r\n      (interval = setInterval(() => {\r\n        observer.next(setTimerState((state) => state + 1));\r\n      }, 1000));\r\n  });\r\n\r\n  useEffect(() => {\r\n    stream$.subscribe();\r\n\r\n    return () => clearInterval(interval);\r\n  }, [interval, isTimerOn]);\r\n\r\n  const joinedTime = displayTimer(timerState);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Display>{joinedTime}</Display>\r\n      <BtnWrapper>\r\n        <Button type='button' variant='contained' onClick={handleStartClick}>\r\n          Start/Stop\r\n        </Button>\r\n        <Button type='button' variant='contained' onClick={handleWaitClick}>\r\n          Wait\r\n        </Button>\r\n        <Button type='button' variant='contained' onClick={handleResetClick}>\r\n          Reset\r\n        </Button>\r\n      </BtnWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default StopWatch;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n  padding-top: 40px;\r\n  ${\"\" /* margin: 0 auto; */}\r\n`;\r\n","import Stopwatch from \"./components/Stopwatch\";\nimport { Wrapper } from \"./App.styled\";\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Stopwatch />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}